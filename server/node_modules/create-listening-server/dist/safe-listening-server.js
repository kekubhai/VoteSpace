"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.safeListeningHttpServer = void 0;
const create_listening_server_js_1 = require("./create-listening-server.js");
/**
 * Safe creation of a listening `http.Server` instance. Tries using `preferredPort`,
 * and if already in use, it re-tries using consecutive ports.
 *
 * @param preferredPort the initial port to try listening to
 * @param requestListener optional request listener. can also be added later with `httpServer.on('request', cb)`
 * @param usedPortRetries number of consecutive ports to retry. @default 100
 * @param hostname optional host to pass to .listen()
 *
 * @returns the http server with the actual port it ended up picking
 */
async function safeListeningHttpServer(preferredPort, requestListener, usedPortRetries = 100, hostname) {
    const lastPort = preferredPort + usedPortRetries;
    let port = preferredPort;
    do {
        try {
            const httpServer = await (0, create_listening_server_js_1.createListeningHttpServer)(port, requestListener, hostname);
            const address = httpServer.address();
            const actualPort = typeof address === "object" && address !== null ? address.port : port;
            return { httpServer, port: actualPort };
        }
        catch (e) {
            if (!isUsedPortError(e)) {
                throw e;
            }
        }
    } while (++port <= lastPort);
    throw new Error(`HTTP server could not start a listening on ports ${preferredPort}-${lastPort}`);
}
exports.safeListeningHttpServer = safeListeningHttpServer;
const isUsedPortError = (e) => !!e && e.code === "EADDRINUSE";
//# sourceMappingURL=safe-listening-server.js.map
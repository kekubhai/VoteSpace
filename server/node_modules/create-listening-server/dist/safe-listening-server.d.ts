/// <reference types="node" />
import type { Server, IncomingMessage, ServerResponse } from "node:http";
/**
 * Safe creation of a listening `http.Server` instance. Tries using `preferredPort`,
 * and if already in use, it re-tries using consecutive ports.
 *
 * @param preferredPort the initial port to try listening to
 * @param requestListener optional request listener. can also be added later with `httpServer.on('request', cb)`
 * @param usedPortRetries number of consecutive ports to retry. @default 100
 * @param hostname optional host to pass to .listen()
 *
 * @returns the http server with the actual port it ended up picking
 */
export declare function safeListeningHttpServer(preferredPort: number, requestListener?: (request: IncomingMessage, response: ServerResponse) => void, usedPortRetries?: number, hostname?: string | undefined): Promise<{
    httpServer: Server;
    port: number;
}>;
//# sourceMappingURL=safe-listening-server.d.ts.map